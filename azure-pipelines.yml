name: 'sip2json build'

trigger:
  batch: true
  branches:
    include:
    - master
    - main
    - bufix/*
    - release/*
    - hotfix/*
    - feature/*
  paths:
    exclude:
    - README.md

strategy:
  matrix:
    Windows:
      osName: Windows_NT
      poolName: Default
      poolImageName:
#    Linux:
#      osName: Linux
#      poolName: Default
#      poolImageName:

variables:
  buildConfiguration: 'Release'
  buildLatestTag: '0.0.0'

pool:
  name: $(poolName)
  vmImage: $(poolImageName)
  demands:
    - Agent.OS -equals $(osName)

steps:
- checkout: self
  fetchDepth: 0

- task: NuGetToolInstaller@1
  displayName: 'Install Nuget'
  inputs:
    versionSpec: '>=5.0.0-0'
    checkLatest: true

- task: gitversion/setup@3
  displayName: 'Install GitVersion..'
  inputs:
    versionSpec: '6.x'
    preferLatestVersion: true

- task: gitversion/execute@3
  displayName: 'Determine Version..'
  inputs:
    useConfigFile: true
    configFilePath: 'GitVersion.yml'

- script: echo %Action%%BuildVersion%
  displayName: 'Set build version to $(GitVersion.FullSemVer)'
  env:
    Action: '##vso[build.updatebuildnumber]'
    BuildVersion: $(GitVersion.FullSemVer)

- task: CMake@1
  displayName: 'CMake ..'
  inputs:
    cmakeArgs: '..'

- task: CMake@1
  displayName: 'CMake --build . --config $(buildConfiguration)'
  inputs:
    cmakeArgs: '--build . --config $(buildConfiguration)'
  condition: succeeded()

- task: CMake@1
  displayName: 'CMake -E chdir $(System.DefaultWorkingDirectory)/build/tests ctest'
  inputs:
    cmakeArgs: '-E chdir $(System.DefaultWorkingDirectory)/build/tests ctest . --output-junit $(System.DefaultWorkingDirectory)/build/tests/test_detail.xml --output-on-failure'
  condition: succeeded()
  continueOnError: true

- task: PublishTestResults@2
  displayName: 'Publish $(buildConfiguration) Test Results test_detail.xml'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(System.DefaultWorkingDirectory)/build/tests/test_detail.xml'
    mergeTestResults: true
    buildConfiguration: '$(buildConfiguration)'
  continueOnError: false
  condition: succeeded()

- task: NuGetCommand@2
  displayName: 'NuGet pack'
  inputs:
    command: 'pack'
    packagesToPack: 'nuget/*.nuspec'
    versioningScheme: 'off'
    buildProperties: 'VERSION=$(GitVersion.MajorMinorPatch)'
  condition: and(succeeded(), startsWith(variables['Agent.OS'], 'Windows'))

- task: NuGetCommand@2
  displayName: 'NuGet push'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;build/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'sqs-nuget'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Agent.OS'], 'Windows'))

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github-packages-sqs'
    repositoryName: 'siddiqsoftware/sip2json'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: '$(build.buildNumber)'
    title: 'v$(build.buildNumber)'
    releaseNotesSource: 'inline'
    releaseNotesInline: 'Documentation https://siddiqsoftware.github.io/sip2json'
    isPreRelease: true
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Agent.OS'], 'Windows'))
